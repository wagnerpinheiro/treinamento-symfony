Treinamento Symfony
========================================================
author: Wagner Pinheiro
date: Outubro de 2016


Tópicos
========================================================

- Introdução
 - Frameworks web
 - Symfony
- GIT
 - Workflows: feature, forking, gitflow;
 - Principais comandos (clone, branch, checkout, commit, push)
- PHP (OOP) com Symfony 1.4
 - MVC
 - criando um novo projeto;
 - estrutura geral do symfony;


Startups S2 PHP
========================================================
- custo + beneficios 
- licenças
- infra 
- mão de obra
- testado e aprovado
- linguagem interpretada 
- stateless

TO-DO: Incluir cloud Tag startups

Infra
========================================================


TO-DO: Incluir modelo de infra


Frameworks Web
========================================================

Timeline das versões estáveis

![The History of Web Frameworks](img/history-of-web-frameworks-timeline.png)

Frameworks Web
========================================================
left: 70%

Contexto
- Spring - Java (10/2002)
- Django - Python (07/2005)
- Ruby on Rails - Ruby (12/2005)
- CakePhp (04/2005)
- Symfony (10/2005) 
- Zend Framework (03/2006)
- Silex (09/2010)
- Laravel (06/2011)

***

Timeline Symfony
- v1.0 (2007)
- v1.2 (2008)
- v1.4 (2009)
- v2.0 (2011)
- v3.0 (2015)

TO-DO: montar gráfico

Symfony
========================================================

- Projeto iniciado em 2004 pelo Fabio Potencier para a SensioLabs;
- Boas práticas MVC e OOP
- Alinhado com outros frameworks
- php 5.x

TO-DO: detalhar


Boas práticas OOP
========================================================

- DRY [Don't Repeat Yourself (DRY) or Duplication is Evil (DIE)]
- KISS [Keep it simple, Stupid!]
- SOLID (fácil de manter e estender)
 
- Premature optimization is the root of all evil
- Design Patterns

Boas práticas OOP: SOLID
========================================================

- Single responsibility principle
<small>“a class should have only a single responsibility (i.e. only one potential change in the software's specification should be able to affect the specification of the class)”</small>
- Open/closed principle
<small>“software entities … should be open for extension, but closed for modification.”</small>
- Liskov substitution principle
<small>“objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract.</small>
- Interface segregation principle
<small>“many client-specific interfaces are better than one general-purpose interface.”</small>
- Dependency inversion principle
<small>one should “Depend upon Abstractions. Do not depend upon concretions.”</small>


GIT
========================================================

TO-DO

GIT: Comandos
========================================================

TO-DO


GIT: Workflows
========================================================

- feature
- forking
- gitflow

TO-DO: Incluir diagramas dos fluxos


Sintaxe PHP - Requisito Para Aula Prática (Revisão)
========================================================

- variáveis
- estruturas condicionais
- estrutura repetitivas
- UML (básico)
- OOP (básico)


Prática Symfony
========================================================

- linux
- checkout do github
- testar alguns comandos do git
- funcional x OOP x MVC
- executando o container docker para o symfony
- criando um novo projeto
- configuração do DB
- definindo um modelo
- criando um controller
- implementando a view
 
TO-DO: mais algum item?
- data-driven?
- behaviours?


Finalização
========================================================

- Treinamento Symfony 2.0/3.0


Referências
========================================================

- https://github.com/mraible/history-of-web-frameworks-timeline
- https://en.wikipedia.org/wiki/Comparison_of_web_frameworks